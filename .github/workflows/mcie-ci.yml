name: FPS-CI

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '*.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '*.md'
  workflow_dispatch:

env:
  buildconfiguration : Release
  IMAGE_NAME: fpsservicegithub
  NUGET_FEED: "https://..."
  CONTAINER_REGISTRY: ....
  K8S_SECRETS: kvcreds
  SONARQUBE_ADDR: "https://..."

jobs:
  sonarqube:
    name: run sonarqube
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
    - name: setup .net core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.x
    - name: setup nuget
      uses: NuGet/setup-nuget@v1.0.2
    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: '11' # The JDK version to make available on the path.
        java-package: jre # (jre, jdk, or jdk+fx) - defaults to jdk
    - name: Run Sonarqube custom action
      uses: ./.github/
      with:
        buildconfiguration: Release
        SONARQUBE_ADDR: ${{ env.SONARQUBE_ADDR }}
        NUGET_FEED: ${{ env.NUGET_FEED }}
        SQ_PROJECT_KEY: "RN_FPS"
        SOLUTION_FILE: "FPS.sln"
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONARQUBE_ACCESS_TOKEN: ${{ secrets.SONARQUBE_ACCESS_TOKEN }}
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        GITHUB_REF: ${{ github.ref }}
        TARGET_BRANCH: ${{ github.base_ref }}
        SOURCE_BRANCH: ${{ github.head_ref }}
        REPO: ${{ github.repository }}

    - name: Build breaker
      if: (false)
      uses: dylan-smith/sonarqube-buildbreaker@main
      with:
        sonarUrl: ${{ env.SONARQUBE_ADDR }}
        sonarToken: ${{ secrets.SONARQUBE_ACCESS_TOKEN }}
  codelinting:
    name: some linting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
          fetch-depth: 0
    - name: lint code base
      uses: github/super-linter@v3
      env:
        VALIDATE_ALL_CODEBASE: false
        DISABLE_ERRORS: false
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: build fps solution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: setup .net core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 2.2.x
    - name: setup nuget
      uses: NuGet/setup-nuget@v1.0.2
    - name: update rnfeed
      run: >
        nuget sources update
        -Source https://...
        -Name RNFeed
        -User FHMP48@motorolasolutions.com
        -Password ${{ secrets.NUGET_API_KEY }}
    - name: nuget restore
      run: nuget restore FPS.sln
    - name: build solution
      run: >
        dotnet build
        --configuration ${{ env.buildconfiguration }}
        --no-restore
    - name: run tests
      run: >
        dotnet test
        --configuration ${{ env.buildconfiguration }}
        --no-restore
        --no-build
        --verbosity normal
    - name: publish solution
      run: >
        dotnet publish
        --configuration ${{ env.buildconfiguration }}
        --output bin/publish
        --no-restore
        --no-build
    - name: build/push docker image
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: ${{ env.IMAGE_NAME }}
        registry: ${{ env.CONTAINER_REGISTRY }}
        dockerfile: FPS.WebApi/Dockerfile
        path: FPS.WebApi
        tags: latest,${{ github.RUN_NUMBER }}
    - name: replace tokens
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '#{'
        tokenSuffix: '}#'
        files: '["**/*.yaml","**/*.txt"]'
      env:
        Build.BuildId: ${{ github.RUN_NUMBER }}
    - name: publish drop artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: drop
        path: Deployment
    - name: publish postman artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: postman
        path: Postman

  deploytodev:
    name: deploy fps to dev env
    needs: [sonarqube, build]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}

    env:
      ENV: ...
      NAMESPACE: ...
      KEY_VAULT_URL: https://...
      k8s_SERVICE: ...
      RESOURCE_GROUP: '...'

    steps:
    - name: download drop artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: drop
    - name: replace tokens
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '__'
        tokenSuffix: '__'
        files: '["**/*.yaml","**/*.json"]'
    - name: azure login
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        resource-group: 'fps-dev'
        cluster-name: '${{ env.k8s_SERVICE }}'
      id: login
    - name: deploy to K8s
      uses: Azure/k8s-deploy@v1.2
      with:
        namespace: '${{ env.NAMESPACE }}'
        manifests: ${{ github.workspace }}/drop/kubernetes/fps-service.yaml
        kubectl-version: latest

  e2e-tests-dev:
    env:
      ENV: DEV
    name: run e2e newman tests - dev env
    needs: [deploytodev]
    runs-on: windows-latest
    steps:
      - name: download postman artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: postman
      - name: install newman
        run: npm install -g newman
      - name: run newman tests
        run: >
          newman
          run ${{ github.workspace }}/postman/FPS.postman_collection.json
          -e ${{ github.workspace }}/postman/FPS_${{ env.ENV }}.postman_environment.json
  deploytoqa:
    name: deploy fps to qa env
    needs: [e2e-tests-dev]
    runs-on: ubuntu-latest

    env:
      ENV: ...
      NAMESPACE: ...
      KEY_VAULT_URL: https://...
      k8s_SERVICE: ...
      RESOURCE_GROUP: '...'

    steps:
    - name: download drop artifact
      uses: actions/download-artifact@v1.0.0
      with:
        name: drop
    - name: replace tokens
      uses: cschleiden/replace-tokens@v1
      with:
        tokenPrefix: '__'
        tokenSuffix: '__'
        files: '["**/*.yaml","**/*.json"]'
    - name: azure login
      uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        resource-group: ${{ env.RESOURCE_GROUP }}
        cluster-name: '${{ env.k8s_SERVICE }}'
      id: login
    - name: deploy to K8s
      uses: Azure/k8s-deploy@v1.2
      with:
        namespace: '${{ env.NAMESPACE }}'
        manifests: ${{ github.workspace }}/drop/kubernetes/fps-service.yaml
        kubectl-version: latest

  e2e-tests-qa:
    env:
      ENV: QA
    name: run e2e newman tests - qa env
    needs: [deploytoqa]
    runs-on: windows-latest
    steps:
      - name: download postman artifact
        uses: actions/download-artifact@v1.0.0
        with:
          name: postman
      - name: install newman
        run: npm install -g newman
      - name: run newman tests
        run: >
          newman
          run ${{ github.workspace }}/postman/FPS.postman_collection.json
          -e ${{ github.workspace }}/postman/FPS_${{ env.ENV }}.postman_environment.json
